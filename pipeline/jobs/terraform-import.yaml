parameters:
  - name: subscription
    type: string

  - name: dependsOn
    type: string
    default: '[]'

  - name: resourceGroup
    type: string

  - name: location
    type: string
    default: uksouth

  - name: storageAccount
    type: string

  - name: containerName
    type: string

  - name: variables
    type: object

  - name: displayName
    type: string

  - name: environment
    type: string

  - name: builtFrom
    type: string
    default: ''

  - name: product
    type: string
    default: ''

  - name: outputName
    type: string

  - name: workingDirectory
    type: string

  - name: serviceName
    type: string

jobs:
- job: Terraform
  displayName: ${{ parameters.displayName }}
  pool:
    vmImage: 'ubuntu-20.04'
  variables:
    ${{ insert }}: ${{ parameters.variables }}
  steps:
  - download: current
    artifact: '${{ parameters.outputName }}'
    displayName: 'Download ${{ parameters.outputName }}.tfplan'
  - template: ../steps/tf-install.yaml
  - bash: |
      echo "Resource Group: ${{ variables.resourceGroup }}"
      echo "Storage Account: ${{ variables.storageAccount }}"
      echo "Container Name: ${{ variables.containerName }}"
  - template: ../steps/tf-init.yaml
    parameters:
      subscription: ${{ parameters.subscription }}
      environment: ${{ parameters.environment }}
      resourceGroup: ${{ variables.resourceGroup }}
      storageAccount: ${{ variables.storageAccount }}
      containerName: ${{ variables.containerName }}
      workingDirectory: ${{ parameters.workingDirectory }}

  - template: ../steps/tf-${{ parameters.serviceName }}-variables.yaml
    parameters:
      variableName: "varValue"
      resourceGroup: $(resourceGroup)
      environment: ${{ parameters.environment }}
      builtFrom: ${{ parameters.builtFrom }}
      product: ${{ parameters.product }}
      outputLocation: '$(Build.SourcesDirectory)/plans/${{ parameters.outputName }}.tfplan'
      subscriptionName: ${{ parameters.subscription }}
      service_now_client: $(service_now_client)
      service_now_secret: $(service_now_secret)

  - ${{ if or(eq( parameters.environment,'prod' ), eq( parameters.environment,'stg' )) }}:
    - template:  templates\Azure\Common\unlock-resource-group.yml@azTemplates
      parameters:
        subscriptionName:  ${{ parameters.subscription }}
        resourceGroupName: ${{ parameters.resourceGroup }}
        lockName: "${{ parameters.environment }}-lock"

  - template: ../steps/tf-import.yaml
    parameters:
      subscription: ${{ parameters.subscription }}
      environment: ${{ parameters.environment }}
      workingDirectory: ${{ parameters.workingDirectory }}
      planLocation: '$(Pipeline.Workspace)/${{parameters.outputName}}/${{parameters.outputName}}.tfplan'
      importResources: 
        - address: azurerm_storage_account.storage_account
          id: '/subscriptions/867a878b-cb68-4de5-9741-361ac9e178b6/resourceGroups/hmi-sharedinfra-dev-rg/providers/Microsoft.Storage/storageAccounts/hmisharedinfrasadev'
        #- address: ''
        #  id: '/subscriptions/74dacd4f-a248-45bb-a2f0-af700dc4cf68/resourceGroups/ss-stg-network-rg/providers/Microsoft.Network/routeTables/aks-stg-appgw-route-table/routes/hmi-ss-dev-vnet'
        #- address: ''
        #  id: '/subscriptions/867a878b-cb68-4de5-9741-361ac9e178b6/resourceGroups/managed-identities-dev-rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/hmi-dev-mi'
        

  #- template: ../steps/az-pip-secrets.yaml
  #  parameters:
  #    targetSubscription: ${{ parameters.subscription }}
  #    ${{ if eq(parameters.environment, 'prod') }}:
  #      sourceSubscription: ${{ parameters.subscription }}
  #    ${{ else }}:
  #      sourceSubscription: "DTS-SHAREDSERVICES-STG"
  #    environment: ${{ parameters.environment }}